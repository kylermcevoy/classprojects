bin_kurtosis <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
if (check_trials(trials) & check_prob(prob)){
return(aux_kurtosis(trials, prob))
}
}
bin_mode(10, 0.3)
bin_variance(10, 03)
bin_variance(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
bin_kurtosis(-1, 0.5)
devtools::document()
devtools::test()
devtools::test()
expect_length(check_trials(20), 1)
devtools::test()
devtools::test(0)
devtools::test()
devtools::test(0)
devtools::test()
devtools::test()
expect_length(checK_trials(20), 1)
check_trials(20)
devtools::test()
devtools::test()
aux_mean("a", 7)
aux_variance(10, 0.25)
devtools::test()
aux_mode(6, 0.5)
aux_skewness(0.5, 7)
aux_skewness(7, 0.5)
aux_skewness(10, 1)
aux_skewness(10, 0.6)
aux_kurtosis(10, 0.6)
devtools::test()
devtools::test()
devtools::check_man()
devtools::build()
devtools::document()
devtools::check_man()
devtools::check()
devtools::test()
devtools::test()
devtools::build()
devtools::check()
devtools::test_check("binomial")
test_check("binomial")
test_dir("tests")
test_dir("tests/testthat")
devtools::check()
devtools::test()
devtools::test()
devtools::check()
devtools::test(0)
devtools::test()
devtools::check()
devtools::run_examples()
devtools::check()
devtools::check()
test_check("binomial")
testthat::test_dir("tests")
test_check(binomial)
test_check("binomial")
test_check("binomial")
devtools::test()
devtools::check()
devtools::check()
devtools::test()
test_check("binomial")
test_file(testthat.R)
test_file("tests/testthat.R")
test_file("tests/testthat/test-aux.R")
devtools::test()
bin_distribution <- function(trials, prob) {
success_vec <- 0:trials
prob_vec <- bin_probability(success = success_vec, trials = trials, prob = prob)
bindis <- data.frame(success = success_vec, prob = prob_vec)
class(bindis) <- c("bindis", "data.frame")
bindis
}
bin_distribution(5, 0.5)
class(bin_distribution(5, 0.5))
plot.bindis <- function(df) {
barplot(df, xlab = "Number of Successes", ylab = "Probability")
}
test_bindis <- bin_distribution(trials = 6, prob = 0.5)
plot(test_bindis)
bin_distribution <- function(trials, prob) {
success_vec <- 0:trials
prob_vec <- bin_probability(success = success_vec, trials = trials, prob = prob)
bindis <- data.frame(success = success_vec, probability = prob_vec)
class(bindis) <- c("bindis", "data.frame")
bindis
}
plot.bindis <- function(df) {
barplot(height = df$prob, xlab = "Number of Successes", ylab = "Probability")
}
bin_distribution(trials = 5, prob = 0.5)
test_bindis <- bin_distribution(trials = 5, prob = 0.5)
plot(test_bindis)
plot.bindis <- function(df) {
barplot(height = df$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = df$success)
}
plot(test_bindis)
test2_bindis <- bin_distribution(trials = 20, prob = 0.6)
plot(test2_bindis)
test3_bindis <- bin_distribution(trials = 10, prob = .8)
plot(test3_bindis)
devtools::build_manual()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
plot.bindis <- function(x, ...) {
graphics::barplot(height = df$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = df$success)
}
plot(test_bindis)
plot(test2_bindis)
plot.bindis <- function(x, ...) {
graphics::barplot(height = x$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = x$success)
}
plot(test2_bindis)
plot(test3_bindis)
plot(test1_bindis)
plot(test_bindis)
plot.bindis <- function(x, ...) {
graphics::barplot(height = x$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = x$success, color = "black", fill = "#00FFB3")
}
plot(test_bindis)
plot.bindis <- function(x, ...) {
graphics::barplot(height = x$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = x$success, col = "#00FFB3")
}
warnings()
plot.bindis <- function(x, ...) {
graphics::barplot(height = x$probability, xlab = "Number of Successes", ylab = "Probability", names.arg = x$success, col = "#00FFB3")
}
plot(test_bindis)
plot(test2_bindis)
devtools::check()
plot(bin_distribution(trials = 5, prob = 0.5))
bin_cumulative <- function(trials, prob) {
success_vec <- 0:trials
prob_vec <- bin_probability(success = success_vec, trials = trials, prob = prob)
cum_sum_vec <- cumsum(prob_vec)
bincum <- data.frame(success = success_vec, probability = prob_vec, cumulative = cum_sum_vec)
class(bincum) <- c("bincum", "data.frame")
return(bincum)
}
bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative(trials = -1, prob = 0.5)
library(binomial)
devtools::build()
devtools::check()
devtools::build()
library(binomial)
class(bin_cumulative(trials = 5, prob = 0.4)
class(bin_cumulative(trials = 5, prob = 0.4))
class(bin_cumulative(trials = 5, prob = 0.4))
plot.bincum  <- function(x, ...) {
graphics::plot(x = x$success, y = x$probability, type = "b", xlab = "Number of Successes", ylab = "Probability of less than or equal the number of Successes")
}
plot(bin_cumulative(trials = 5, prob = 0.4))
plot.bincum  <- function(x, ...) {
graphics::plot(x = x$success, y = x$cumulative, type = "b", xlab = "Number of Successes", ylab = "Probability of less than or equal the number of Successes")
}
plot(bin_cumulative(trials = 5, prob = 0.4))
plot.bincum  <- function(x, ...) {
graphics::plot(x = x$success, y = x$cumulative, type = "b", xlab = "Number of Successes", ylab = "Probability of equal or fewer Successes")
}
dis2 <- bin_cumulative(trials = 20, prob = .75)
plot(dis2)
devtools::document(0)
devtools::document()
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
binvar <- list(trials = trials, prob = prob)
class(binvar) <- "binvar"
return(binvar)
}
bin_variable(trials = 10, prob = 0.5)
print.binvar <- function(x, ...) {
print("\"Binomial variable\"")
print("\n")
print("Parameters")
print(paste("- number of trials:", x$trials))
print(paste("- prob of success:", x$prob))
invisible(x)
}
print(bin_variable(10, 0.3))
print.binvar <- function(x, ...) {
print("Binomial variable")
print("")
print(noquote("Parameters"))
print(paste("- number of trials:", x$trials))
print(paste("- prob of success:", x$prob))
invisible(x)
}
print(bin_variable(10, 0.3))
print.binvar <- function(x, ...) {
print("Binomial variable")
print()
print(noquote("Parameters"))
print(paste("- number of trials:", x$trials))
print(paste("- prob of success:", x$prob))
invisible(x)
}
print(bin_variable(10, 0.3))
print.binvar <- function(x, ...) {
print("Binomial variable")
cat("\n\n")
print(noquote("Parameters"))
print(paste("- number of trials:", x$trials))
print(paste("- prob of success:", x$prob))
invisible(x)
}
print(bin_variable(10, 0.3))
print.binvar <- function(x, ...) {
print("Binomial variable")
cat("\n\n")
print(noquote("Parameters"))
print(noquote(paste("- number of trials:", x$trials)))
print(noquote(paste("- prob of success:", x$prob)))
invisible(x)
}
print(bin_variable(10, 0.3))
print.binvar <- function(x, ...) {
print("Binomial variable")
cat("\n")
print(noquote("Parameters"))
print(noquote(paste("- number of trials:", x$trials)))
print(noquote(paste("- prob of success:", x$prob)))
invisible(x)
}
print(bin_variable(10, 0.3))
devtools::check()
library(binomial)
bin_choose(n = 5, k = 4:6)
bin_choose <- function(n, k) {
if (!all(k < n)) {
stop("k must be less than or equal to n")
}
else {
return(factorial(n) / ((factorial(n - k) * factorial(k))))
}
}
bin_choose(n = 5, k = 4:6)
bin_choose(n = 5, k = 6)
bin_choose(n = 5, k = 5)
bin_choose(n = 5, k = 5)
bin_choose <- function(n, k) {
if (!all(k <= n)) {
stop("k must be less than or equal to n")
}
else {
return(factorial(n) / ((factorial(n - k) * factorial(k))))
}
}
bin_choose(n = 5, k = 5)
bin_choose(n = -5, k = 5)
bin_choose(n = -5, k = -1)
bin_choose(n = 1, k = -1)
choose(20, 2)
devtools::check()
devtools::test()
dbinom(5, 1)
dbinom(5, 1, prob = 0.5)
dbinom(1, 5, prob = 0.5)
devtools::test()
devtools::test()
bin_probability(trials = 5, success = 4:6, prob = 0.5)
expect_s3_class(bin_distribution(trials = 20, prob = 0.5), class = c("bindis", "data.frame"))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
summary.binvar <- function(x, ...) {
binsum = c(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(binsum) = "summary.binvar"
return(binsum)
}
summary(bin_variable(trials = 20, prob = 0.5))
summary.binvar <- function(x, ...) {
binsum = c(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(binsum) = "summary.binvar"
return(binsum)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
print.summary.binvar <- function(x, ...) {
print("Summary Binomial")
cat("\n")
print(noquote("Parameters"))
print(noquote(paste("- number of trials:", x$trials)))
print(noquote(paste("- prob of success :", x$prob)))
cat("\n")
print(noquote("Measures"))
print(noquote(paste("-mean      :", x$mean)))
print(noquote(paste("-variance  :", x$variance)))
print(noquote(paste("-mode      :", x$mode)))
print(noquote(paste("-skewness  :", x$skewness)))
print(noquote(paste("-kurtosis  :", x$kurtosis)))
}
binsum1
class(binsum1)
summary.binvar <- function(x, ...) {
binsum = c(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(binsum) = c("summary.binvar", "list")
return(binsum)
}
binsum1
print(binsum1)
summary.binvar <- function(x, ...) {
binsum = list(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob))
class(binsum) = c("summary.binvar")
return(binsum)
}
summary(bin1)
bin1
binsum1
binsum1 <- summary(bin1)
binsum1
bin2 <- bin_variable(20, .6)
summary(bin2)
print.summary.binvar <- function(x, ...) {
print("Summary Binomial")
cat("\n")
print(noquote("Parameters"))
print(noquote(paste("- number of trials:", x$trials)))
print(noquote(paste("- prob of success :", x$prob)))
cat("\n")
print(noquote("Measures"))
print(noquote(paste("- mean      :", x$mean)))
print(noquote(paste("- variance  :", x$variance)))
print(noquote(paste("- mode      :", x$mode)))
print(noquote(paste("- skewness  :", x$skewness)))
print(noquote(paste("- kurtosis  :", x$kurtosis)))
}
devtools::check()
summary.binvar <- function(object, ...) {
binsum = list(
trials = object$trials,
prob = object$prob,
mean = aux_mean(object$trials, object$prob),
variance = aux_variance(object$trials, object$prob),
mode = aux_mode(object$trials, object$prob),
skewness = aux_skewness(object$trials, object$prob),
kurtosis = aux_kurtosis(object$trials, object$prob))
class(binsum) = c("summary.binvar")
return(binsum)
}
print.summary.binvar <- function(x, ...) {
print("Summary Binomial")
cat("\n")
print(noquote("Parameters"))
print(noquote(paste("- number of trials:", x$trials)))
print(noquote(paste("- prob of success :", x$prob)))
cat("\n")
print(noquote("Measures"))
print(noquote(paste("- mean      :", x$mean)))
print(noquote(paste("- variance  :", x$variance)))
print(noquote(paste("- mode      :", x$mode)))
print(noquote(paste("- skewness  :", x$skewness)))
print(noquote(paste("- kurtosis  :", x$kurtosis)))
}
bin3 <- bin_variable(30, 0.3)
summary(bin3)
devtools::document()
devtools::check()
devtools::build_manual()
devtools::build_vignettes()
?devtools::build_vignettes
?binomial
??binomial
library(binomial)
install.packages(binomial)
devtools::build()
?binomial
??binomial
library(binomial)
install.packages("C:/Users/BeepBoop/Documents/stat-133/binomial_0.1.0.tar.gz")
devtools::install(pkg = "C:/Users/BeepBoop/Documents/stat-133/binomial_0.1.0.tar.gz")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::use_vignette()
usethis::use_vignette()
usethis::use_vignette("Introduction to the Binomial Package")
devtools::build_vignettes()
library(binomial)
??binomial
??binomial
?binomial::vignette
??binomial::vignete
library(binomial)
ls()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(binomial)
bin_choose(n = 10, k = 10)
bin_choose(n = 5, k = 1:3)
bin_choose(20, 17)
bin_probability(success = 10, trials = 20, prob = 0.5)
bin_probability(1:5, trials = 10, prob = 0.89)
bin_probability(success = 10, trials = 20, prob = 0.5)
bin_probability(1:5, trials = 10, prob = 0.35)
devtools::check()
?qpdf
devtools::build()
library(binomial)
??binomial
vignette(package = "binomial")
install.packages("~/stat-133/binomial_0.1.0.tar.gz", repos = NULL, type = "source")
vignette(pkg = "binomial")
vignette(package = "binomial")
source("../../R/functions.R")
setwd(test/testthat)
setwd("test/testthat")
getwd
getwd()
devtools::test()
devtoosl::check()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
??binomial
?remove.package
??remove.package
remove.packages("binomial")
??binomial
devtools::check()
install.packages("qpdf")
devtools::check()
devtools::check()
devtools::test()
context("Main Function Tests of binomial")
context("Main Function Tests of binomial")
devtools::check()
devtools::build_vignettes()
devtools::build_man()
devtools::build_manual()
devtools::check_man()
devtools::build()
??binomial
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(binomial)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(binomial)
??binomial
library(binomial)
??binomial
install.packages("~/hw-stat133/binomial_0.1.0.tar.gz", repos = NULL, type = "source")
??binomial
devtools::test()
?bin_probability
devtools::build_vignettes()
2*qt(sqrt(2), lower.tail = FALSE)
2 * qt(sqrt(2), lower.tail = FALSE, df = 2)
2 * pt(sqrt(2), lower.tail = FALSE, df = 2)
