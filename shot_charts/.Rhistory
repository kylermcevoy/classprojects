sink(file = "output/draymond-green-summary.txt")
summary(draymond)
sink()
sink(file = "output/kevin-durant-summary.txt")
summary(durant)
sink()
sink(file = "output/stephen-curry-summary.txt")
summary(curry)
sink()
sink(file = "output/klay-thompson-summary.txt")
summary(klay)
sink()
# Combining Datasets and Exporting------------------------------------------------------
shots_data <- rbind(curry, durant, draymond, iguodala, klay)
write.csv(
x=shots_data,
file = "data/shots-data.csv"
)
sink(file = "output/shots-data-summary.txt")
summary(shots_data)
sink()
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
#' @title f: x squared
#' @description calculate the square of input
#' @param x (numeric)
#' @return the square of x
f <- function(x) {
return(x^2)
}
f(2)
f(-5)
#' @title g: 2x + 5
#' @description double input and add 5
#' @param x (numeric)
#' @return 2x + 5
g <- function(x) {
return(2*x + 5)
}
g(0)
g(-5/2)
#' @title f of g composite
#' @description double input add 5 then square
#' @param x (numeric)
#' @return (2x + 5)^2
fog <- function(x) {
return((2x+5)^2)
}
#' @title f of g composite
#' @description double input add 5 then square
#' @param x (numeric)
#' @return (2x + 5)^2
fog <- function(x) {
return((2*x+5)^2)
}
fog(2)
fog(-5)
#' @title g of f composite
#' @description square input, then double and add 5
#' @param x (numeric)
#' @return 2*(x^2) + 5
gof <- function(x) {
return(2*(x^2) + 5)
}
gof(0)
gof(-5/2)
#' @title pythagorean theorem
#' @description applys pythagorean formula to two inputs and calculates the third side of a right triangle with sides the length of the inputs
#' @param a length of one side of triangle
#' @param b length of the other side of right triangle
#' @return computed length of side c of right triangle
pythagoras <- function(a, b) {
return(sqrt(a^2 + b^2))
}
pythagoras(3,4)
#' @title pythagorean theorem
#' @description applys pythagorean formula to two inputs and calculates the third side of a right triangle with sides the length of the inputs
#' @param a length of one side of triangle
#' @param b length of the other side of right triangle
#' @return computed length of side c of right triangle
pythagoras <- function(a, b) {
if( a < 0 ) {
stop("a cannot be negative")
}
else if (b < 0 ) {
stop("b cannot be negative")
}
else {
return(sqrt(a^2 + b^2))
}
}
pythagoras(-2, 3)
pythagoras(3,4)
#' @title pythogorean theorem two equal sides
#' @description takes one input of length and calculates the length of the hypotenuse of a triangle with two equivalent sides at a right angle
#' @param a length of both sides of triangle
#' @return length of hypotenuse for this triangle
pythagoras <- function(a) {
return(sqrt(2* a^2))
}
pythagoras(5)
#' @title Area of a Circcle
#' @description given the radius computes the area of a circle
#' @param radius the radius of the circle
#' @return the area of the circle
circle_area <- function(radius = 1) {
return((pi * radius^2))
}
circle_area()
circle_area(radius = 3)
#' @title Area of a Circcle
#' @description given the radius computes the area of a circle
#' @param radius the radius of the circle
#' @return the area of the circle
circle_area <- function(radius = 1) {
if (radius < 0) {
stop("radius cannot be negative")
}
else {
return((pi * radius^2))
}
}
circle_area()
circle_area(radius = 3)
circle_area(radius = -2)
#' @title Calculate surface area of a cylinder
#' @description takes radius and height and calculates the surface area of a cylinder
#' @param radius radius of the cylinder base
#' @param height height of the cylinder
#' @return the surface area of the cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (height < 0) {
stop("height cannot be negative")
}
else if (radius < 0) {
stop("radius cannot be negative")
}
else {
return(2 * pi * radius * height + pi * radius^2)
}
}
#' @title Calculate surface area of a cylinder
#' @description takes radius and height and calculates the surface area of a cylinder
#' @param radius radius of the cylinder base
#' @param height height of the cylinder
#' @return the surface area of the cylinder
cylinder_area <- function(radius = 1, height = 1) {
if (height < 0) {
stop("height cannot be negative")
}
else if (radius < 0) {
stop("radius cannot be negative")
}
else {
return(2 * pi * radius * height + 2 * circle_area(radius))
}
}
cylinder_area()
cylinder_area(radius = 2, height = 3)
cylinder_area(radius = -2, height = 1)
cylinder_area(radius = 2, height = -1)
cylinder_area(radius = -2, height = -1)
#' @title Volume of a Cylinder
#' @description takes height and radius and calculates the volume of the resulting cylinder
#' @param height default 1, height of the cylinder (numeric)
#' @param radius default 1, radius of the cylinder (numeric)
#' @return computes the volume of a cylinder
cylinder_volume <- function(radius = 1, height = 1){
if (radius < 0) {
stop("radius cannot be negative")
}
else if (height < 0) {
stop("height cannot be negative")
}
else {
return(height * circle_area(radius))
}
}
cylinder_volume()
cylinder_volume(radius = 3, height = 10)
cylinder_volume(height = 10, radius = 3 )
typeof(3)
typeof(3L)
? "%%"
#' @title is even
#' @description check whether input is even number
#' @param x (integer)
#' @return boolean if even gives TRUE
is_even <- function(x) {
if (typeof(x) != "integer" & typeof(x) != "double") {
return(NA)
}
else if (x %% 2 == 0) {
return (TRUE)
}
else if ( (x + 1) %% 2 == 0) {
return(FALSE)
}
else {
return(NA)
}
}
is_even(10)
is_even(33)
is_even('a')
#' @title is odd
#' @description returns TRUE if input is odd, FALSE if the input is even, NA if the input is not a number
#' @param x (numeric or integer) number to check evenness
#' @return boolean TRUE if odd, FALSE if even, NA if not number
is_odd <- function(x) {
return(!is_even(x))
}
is_odd(1)
is_odd(4)
is_odd('a')
#' @title grading function
#' @description returns a Letter grade for a numeric score
#' @param score between 0 and 100 (numeric)
#' @return returns a string letter grade for each valid score. 90-100 A [80,90) B, [70, 80) C [60, 70) D, < 60 F
grade <- function(score) {
if (score > 100 | score < 0) {
stop("score must be a number between 0 and 100")
}
else if (score >= 90) {
return("A")
}
else if (score < 90 & score >= 80) {
return("B")
}
else if (score < 80 & score >= 70) {
return("C")
}
else if (score < 70 & score >= 60) {
return("D")
}
else if (score < 60) {
return("F")
}
}
grade(score = 90)
grade(score = 89.9999)
grade(score = 70.00000001)
grade(score = 50)
grade(score = 101)
grade(score = -1)
#' @title miles to kiloms
#' @description converts miles to kilometers
#' @param x non-negative (numeric)
#' @return x converted into kilometers
miles2kms <- function(x = 1) {
return( x * 1.6)
}
miles <- c(1:10, seq(from = 20, to = 100, by = 10))
miles <- c(1:10, seq(from = 20, to = 100, by = 10))
kms <- miles2kms(miles)
mileskms <- data.frame(miles, kms)
mileskms
#' @title: gallons to liters
#' @description: convert input of gallons to units liters
#' @param x number of gallons (numeric)
#' @return x converted into units of liters
gallon2liters <- function(x) {
return( x * 3.78541)
}
#' @title liters to gallons
#' @description calls gallons2liters to convert liters to gallons
#' @param x number of liters (numeric)
#' @return number of gallons converted
liters2gallons <- function(x) {
return(x / gallon2liters(1))
}
liters <- c(1:9, seq(from = 10, to = 100, by = 10))
gallons <- liters2gallons(liters)
liters_gallons <- data.frame(liters, gallons)
liters_gallons
#' @title Seconds to Years
#' @description takes input of seconds returns number of years
#' @param x (numeric) number of seconds
#' @return number of converted years
seconds2years <- function(x) {
return(x / 31557600)
}
seconds2years(1000000000)
#' @title poly1: x^3 - x^2
#' @description takes input x and calculates the polynomial (x^2)* (x - 1)
#' @param x real number(numeric)
#' @return value of polynomial (x^2)*(x-1)
poly1 <- function(x) {
return((x^2) * (x - 1))
}
x <- seq(-4, 4, length.out = 20)
y <- poly1(x)
plot(x, y, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", x^2, (x-1))))
#' @title poly2: x^3
#' @description compute value of polynomial x^3 of input
#' @input x real number (numeric)
#' @return x^3
poly2 <- function(x) {
return(x^3)
}
#' @title poly3: (x^2 - 1)((x + 3)^3)
#' @description: see above title
#' @param x real number (number)
#' @return above polynomial
poly3 <- function(x) {
return((x^2 - 1)*((x+3)^3))
}
#' @title poly4: (x^2 - 1)*(x^2 - 9)
#' @description above poly of input
#' @param real number x (numeric)
#' @return poly of x
poly4 <- function(x) {
return((x^2 - 1) * (x^2 - 9))
}
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^2 - 1), (x-1))))
z <- poly2(x)
q <- poly3(x)
r <- poly4(x)
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^2 - 1), (x-1))))
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^3))
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^3)))
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^3))))
plot(x, z, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", x^3)))
plot(x, q, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^2 - 1), ((x+3)^3))))
plot(x, r, type = "l", lwd = 3, col = "#FB7215", las = 1)
abline(h = 0, v = 0, col = "#888888aa", lwd = 1.5)
title(main = expression(paste(f(x), "=", (x^2 - 1), ((x)^2 - 9))))
z <- 100 * pi
{
if (z > 100) {
z = 100
}
else if( z < 0) {
z = 0
}
else {
z = z
}
}
z <- 100 * pi
{
if (z > 100) {
z = 100
}
else if( z < 0) {
z = 0
}
else {
z = z
}
}
z
day <- "Tuesday"
switch(day,
Sunday = 1,
Monday = 2,
Tuesday = 3,
Wednesday = 4,
Thursday = 5,
Friday = 6,
Saturday = 7,
NA)
day <- "Friday"
switch(day,
Sunday = 1,
Monday = 2,
Tuesday = 3,
Wednesday = 4,
Thursday = 5,
Friday = 6,
Saturday = 7,
NA)
day_num <- 3
switch(day_num,
"Sunday",
"Monday",
"Tuesday",
"wednesday",
"Thursday",
"Friday",
"Saturday")
day_num <- 5
switch(day_num,
"Sunday",
"Monday",
"Tuesday",
"wednesday",
"Thursday",
"Friday",
"Saturday")
#' @title miles to kms
#' @description converts miles to kms
#' @param x input of miles(numeric)
#' @return converted input to kms
miles2kms <- function(x = 1) {
return(x / 0.62137)
}
#' @title miles to meters
#' @description converts miles to meters
#' @param x input of miles(numeric)
#' @return converted input to meters
miles2meters <- function(x = 1) {
return(x / 0.00062137)
}
#' @title miles to yards
#' @description converts miles to yards
#' @param x input of miles(numeric)
#' @return converted input to yards
miles2yards <- function(x = 1) {
return(x * 1760)
}
#' @title miles to feet
#' @description converts miles to feet
#' @param x input of miles(numeric)
#' @return converted input to feet
miles2feet <- function(x = 1) {
return(x * 5280)
}
#' @title miles to inches
#' @description converts miles to inches
#' @param x input of miles(numeric)
#' @return converted input to inches
miles2inches <- function(x = 1) {
return(x * 63360)
}
miles2inches(2)
miles2feet(2)
miles2yards(2)
miles2meters(2)
miles2kms(2)
#' @title Conversion from Miles
#' @description converts a number of miles to an output in a different unit
#' @param x (numeric) number of miles
#' @param to (character) the unit to convert to
#' @return the inputted number of miles converted to new unit of to
convert <- function(x, to = "km") {
return((switch(to,
km = 1/(0.62137),
m = 1/(0.00062137),
yd = 1/1760,
ft = 5280,
in = 63360,
NA))*x)
}
#' @title Conversion from Miles
#' @description converts a number of miles to an output in a different unit
#' @param x (numeric) number of miles
#' @param to (character) the unit to convert to
#' @return the inputted number of miles converted to new unit of to
convert <- function(x, to = "km") {
return((switch(to,
km = 1/(0.62137),
m = 1/(0.00062137),
yd = 1/1760,
ft = 5280,
`in` = 63360,
NA))*x)
}
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert(3, "km")
convert(3, "m")
convert(2, "in")
convert(2, "ft")
convert(2, "yd")
convert(2, "km")
convert(2, "m")
#' @title Conversion from Miles
#' @description converts a number of miles to an output in a different unit
#' @param x (numeric) number of miles
#' @param to (character) the unit to convert to
#' @return the inputted number of miles converted to new unit of to
convert <- function(x, to = "km") {
return((switch(to,
km = 1/(0.62137),
m = 1/(0.00062137),
yd = 1760,
ft = 5280,
`in` = 63360,
NA))*x)
}
convert(3, "in")
convert(3, "ft")
convert(3, "yd")
convert(3, "km")
convert(3, "m")
convert(2, "in")
convert(2, "ft")
convert(2, "yd")
convert(2, "km")
convert(2, "m")
convert(2, "in")
convert(2, "ft")
convert(2, "yd")
convert(2, "km")
convert(2, "m")
